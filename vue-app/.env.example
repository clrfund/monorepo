# Ethereum Mainnet provider (used for ENS lookups)
VITE_ETHEREUM_MAINNET_API_URL=https://mainnet.infura.io/v3/ADD_API_KEY

# Chain details where contract is deployed
VITE_ETHEREUM_API_URL=http://localhost:18545
VITE_ETHEREUM_API_CHAINID=31337
VITE_INFURA_ID=
VITE_IPFS_GATEWAY_URL=https://ipfs.io

# ipfs file upload and pinning url
VITE_IPFS_PINNING_URL=https://api.pinata.cloud/pinning/pinFileToIPFS
# pinata api JWT for api authorization. This key is only here for backward compatible
# it will be removed later as its value is too long and causes netlify functions deployment to fail
VITE_IPFS_PINNING_JWT=
# pinata api key and secret api key for uploading project images to ipfs
# The pinata api only need to set these keys or the VITE_IPFS_PINNING_JWT to authenticate
VITE_IPFS_API_KEY=
VITE_IPFS_SECRET_API_KEY=

VITE_SUBGRAPH_URL=http://localhost:8000/subgraphs/name/clrfund/clrfund

VITE_CLRFUND_FACTORY_ADDRESS=0x5FC8d32690cc91D4c39d9d3abcBD16989F875707

# Supported values: simple, brightid
VITE_USER_REGISTRY_TYPE=simple
# clr.fund (prod) or CLRFundTest (testing)
# Learn more about BrightID and context in /docs/brightid.md
VITE_BRIGHTID_CONTEXT=clrfund-goerli


# These are for interacting with the BrightID api. When the SPONSOR_API_URL and one of the
# SPONSOR_KEY is set, a sponsor request will be sent to the BrightID node when the QR code
# to link users wallet address to BrightID is displayed.  SPONSOR_KEY is used to sign the
# sponsor request. The SPONSOR_KEY_FOR_NETLIFY will trigger the netlify serverless function
# to send the sponsor request. The SPONSOR_KEY alone will send the request directly from
# the web app without using the netlify function.
# VITE_BRIGHTID_NODE_URL is the BrightID node used to query BrightID status. It needs to
# match the BRIGHTID_VERIFIER_ADDR defined in the contract .env file. This address is used
# to verify the signature returned from the BrightID verification status for user registration.
# The BRIGHTID_VERIFIER_ADDR value is the ethSigningAddress from the node url,
# e.g. https://brightid.clr.fund
#VITE_BRIGHTID_SPONSOR_KEY_FOR_NETLIFY=
#VITE_BRIGHTID_SPONSOR_KEY=
#VITE_BRIGHTID_SPONSOR_API_URL=https://brightid.clr.fund/brightid/v6/operations

# BrightId node one url, default to clrfund node at https://brightid.clr.fund/brightid/v6
#VITE_BRIGHTID_NODE_URL=https://app.brightid.org/node/v6

# Optional matching pool address to override the funding round factory address
# e.g. if using a safe multisig for the matching pool
VITE_MATCHING_POOL_ADDRESS=

# Supported values: simple, optimistic, kleros
VITE_RECIPIENT_REGISTRY_TYPE=optimistic

VITE_RECIPIENT_REGISTRY_POLICY=QmeygKjvrpidJeFHv6ywjUrj718nwtFQgCCPPR4r5nL87R

# Comma-separated list of IPFS hashes
VITE_EXTRA_ROUNDS=

# Operator of clr.fund instance
VITE_OPERATOR=

# Index of first round to consider
VITE_FIRST_ROUND=

# Google Service Account credentials in JSON format
GOOGLE_APPLICATION_CREDENTIALS=
# Spreadsheet ID to send recipients data
VITE_GOOGLE_SPREADSHEET_ID=
# Select the sheet's name to write the data, by default 'Raw'
GOOGLE_SHEET_NAME=

# the number of record to export in a pending submissions JSON file. Default 60.
VITE_EXPORT_BATCH_SIZE=

# This is only used for netlify function, sponsor.js, to avoid getting the 'fetch not found' error
AWS_LAMBDA_JS_RUNTIME=nodejs18.x

# walletconnect project id
VITE_WALLET_CONNECT_PROJECT_ID=walletconnect_project_id

# This date will be used in the verify landing page. If not set or bad date format, a generic message will be displayed
# format: yyyy-MM-dd e.g. 2023-06-26
VITE_NEXT_ROUND_START_DATE=

# Use this deadline (in UTC) to hide the 'Add Project' button
# format: yyyy-MM-dd
VITE_RECIPIENT_JOIN_DEADLINE=
