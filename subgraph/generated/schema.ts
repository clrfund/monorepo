// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ClrFund extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClrFund entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClrFund must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ClrFund", id.toString(), this);
    }
  }

  static load(id: string): ClrFund | null {
    return changetype<ClrFund | null>(store.get("ClrFund", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get coordinator(): Bytes | null {
    let value = this.get("coordinator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set coordinator(value: Bytes | null) {
    if (!value) {
      this.unset("coordinator");
    } else {
      this.set("coordinator", Value.fromBytes(<Bytes>value));
    }
  }

  get nativeToken(): Bytes | null {
    let value = this.get("nativeToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nativeToken(value: Bytes | null) {
    if (!value) {
      this.unset("nativeToken");
    } else {
      this.set("nativeToken", Value.fromBytes(<Bytes>value));
    }
  }

  get nativeTokenInfo(): string | null {
    let value = this.get("nativeTokenInfo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nativeTokenInfo(value: string | null) {
    if (!value) {
      this.unset("nativeTokenInfo");
    } else {
      this.set("nativeTokenInfo", Value.fromString(<string>value));
    }
  }

  get contributorRegistry(): string | null {
    let value = this.get("contributorRegistry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contributorRegistry(value: string | null) {
    if (!value) {
      this.unset("contributorRegistry");
    } else {
      this.set("contributorRegistry", Value.fromString(<string>value));
    }
  }

  get contributorRegistryAddress(): Bytes | null {
    let value = this.get("contributorRegistryAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contributorRegistryAddress(value: Bytes | null) {
    if (!value) {
      this.unset("contributorRegistryAddress");
    } else {
      this.set("contributorRegistryAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get recipientRegistry(): string | null {
    let value = this.get("recipientRegistry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set recipientRegistry(value: string | null) {
    if (!value) {
      this.unset("recipientRegistry");
    } else {
      this.set("recipientRegistry", Value.fromString(<string>value));
    }
  }

  get recipientRegistryAddress(): Bytes | null {
    let value = this.get("recipientRegistryAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set recipientRegistryAddress(value: Bytes | null) {
    if (!value) {
      this.unset("recipientRegistryAddress");
    } else {
      this.set("recipientRegistryAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get currentRound(): string | null {
    let value = this.get("currentRound");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentRound(value: string | null) {
    if (!value) {
      this.unset("currentRound");
    } else {
      this.set("currentRound", Value.fromString(<string>value));
    }
  }

  get maciFactory(): Bytes | null {
    let value = this.get("maciFactory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set maciFactory(value: Bytes | null) {
    if (!value) {
      this.unset("maciFactory");
    } else {
      this.set("maciFactory", Value.fromBytes(<Bytes>value));
    }
  }

  get coordinatorPubKey(): string | null {
    let value = this.get("coordinatorPubKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set coordinatorPubKey(value: string | null) {
    if (!value) {
      this.unset("coordinatorPubKey");
    } else {
      this.set("coordinatorPubKey", Value.fromString(<string>value));
    }
  }

  get stateTreeDepth(): BigInt | null {
    let value = this.get("stateTreeDepth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stateTreeDepth(value: BigInt | null) {
    if (!value) {
      this.unset("stateTreeDepth");
    } else {
      this.set("stateTreeDepth", Value.fromBigInt(<BigInt>value));
    }
  }

  get messageTreeDepth(): BigInt | null {
    let value = this.get("messageTreeDepth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set messageTreeDepth(value: BigInt | null) {
    if (!value) {
      this.unset("messageTreeDepth");
    } else {
      this.set("messageTreeDepth", Value.fromBigInt(<BigInt>value));
    }
  }

  get voteOptionTreeDepth(): BigInt | null {
    let value = this.get("voteOptionTreeDepth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set voteOptionTreeDepth(value: BigInt | null) {
    if (!value) {
      this.unset("voteOptionTreeDepth");
    } else {
      this.set("voteOptionTreeDepth", Value.fromBigInt(<BigInt>value));
    }
  }

  get fundingRounds(): Array<string> | null {
    let value = this.get("fundingRounds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }

  get lastUpdatedAt(): string | null {
    let value = this.get("lastUpdatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastUpdatedAt(value: string | null) {
    if (!value) {
      this.unset("lastUpdatedAt");
    } else {
      this.set("lastUpdatedAt", Value.fromString(<string>value));
    }
  }
}

export class Message extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Message entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Message must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Message", id.toString(), this);
    }
  }

  static load(id: string): Message | null {
    return changetype<Message | null>(store.get("Message", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get data(): Array<BigInt> | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set data(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get msgType(): BigInt {
    let value = this.get("msgType");
    return value!.toBigInt();
  }

  set msgType(value: BigInt) {
    this.set("msgType", Value.fromBigInt(value));
  }

  get publicKey(): string | null {
    let value = this.get("publicKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set publicKey(value: string | null) {
    if (!value) {
      this.unset("publicKey");
    } else {
      this.set("publicKey", Value.fromString(<string>value));
    }
  }

  get fundingRound(): string | null {
    let value = this.get("fundingRound");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fundingRound(value: string | null) {
    if (!value) {
      this.unset("fundingRound");
    } else {
      this.set("fundingRound", Value.fromString(<string>value));
    }
  }

  get submittedBy(): Bytes | null {
    let value = this.get("submittedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set submittedBy(value: Bytes | null) {
    if (!value) {
      this.unset("submittedBy");
    } else {
      this.set("submittedBy", Value.fromBytes(<Bytes>value));
    }
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionIndex(): BigInt {
    let value = this.get("transactionIndex");
    return value!.toBigInt();
  }

  set transactionIndex(value: BigInt) {
    this.set("transactionIndex", Value.fromBigInt(value));
  }
}

export class PublicKey extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublicKey entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PublicKey must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PublicKey", id.toString(), this);
    }
  }

  static load(id: string): PublicKey | null {
    return changetype<PublicKey | null>(store.get("PublicKey", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fundingRound(): string | null {
    let value = this.get("fundingRound");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fundingRound(value: string | null) {
    if (!value) {
      this.unset("fundingRound");
    } else {
      this.set("fundingRound", Value.fromString(<string>value));
    }
  }

  get messages(): Array<string> | null {
    let value = this.get("messages");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get x(): BigInt {
    let value = this.get("x");
    return value!.toBigInt();
  }

  set x(value: BigInt) {
    this.set("x", Value.fromBigInt(value));
  }

  get y(): BigInt {
    let value = this.get("y");
    return value!.toBigInt();
  }

  set y(value: BigInt) {
    this.set("y", Value.fromBigInt(value));
  }

  get stateIndex(): BigInt | null {
    let value = this.get("stateIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stateIndex(value: BigInt | null) {
    if (!value) {
      this.unset("stateIndex");
    } else {
      this.set("stateIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get voiceCreditBalance(): BigInt | null {
    let value = this.get("voiceCreditBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set voiceCreditBalance(value: BigInt | null) {
    if (!value) {
      this.unset("voiceCreditBalance");
    } else {
      this.set("voiceCreditBalance", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class FundingRound extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FundingRound entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FundingRound must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FundingRound", id.toString(), this);
    }
  }

  static load(id: string): FundingRound | null {
    return changetype<FundingRound | null>(store.get("FundingRound", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clrFund(): string | null {
    let value = this.get("clrFund");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clrFund(value: string | null) {
    if (!value) {
      this.unset("clrFund");
    } else {
      this.set("clrFund", Value.fromString(<string>value));
    }
  }

  get maci(): Bytes | null {
    let value = this.get("maci");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set maci(value: Bytes | null) {
    if (!value) {
      this.unset("maci");
    } else {
      this.set("maci", Value.fromBytes(<Bytes>value));
    }
  }

  get maciTxHash(): Bytes | null {
    let value = this.get("maciTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set maciTxHash(value: Bytes | null) {
    if (!value) {
      this.unset("maciTxHash");
    } else {
      this.set("maciTxHash", Value.fromBytes(<Bytes>value));
    }
  }

  get pollId(): BigInt | null {
    let value = this.get("pollId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pollId(value: BigInt | null) {
    if (!value) {
      this.unset("pollId");
    } else {
      this.set("pollId", Value.fromBigInt(<BigInt>value));
    }
  }

  get pollAddress(): Bytes | null {
    let value = this.get("pollAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set pollAddress(value: Bytes | null) {
    if (!value) {
      this.unset("pollAddress");
    } else {
      this.set("pollAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get messages(): Array<string> | null {
    let value = this.get("messages");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get recipientRegistry(): string | null {
    let value = this.get("recipientRegistry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set recipientRegistry(value: string | null) {
    if (!value) {
      this.unset("recipientRegistry");
    } else {
      this.set("recipientRegistry", Value.fromString(<string>value));
    }
  }

  get recipientRegistryAddress(): Bytes | null {
    let value = this.get("recipientRegistryAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set recipientRegistryAddress(value: Bytes | null) {
    if (!value) {
      this.unset("recipientRegistryAddress");
    } else {
      this.set("recipientRegistryAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get contributorRegistry(): string | null {
    let value = this.get("contributorRegistry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contributorRegistry(value: string | null) {
    if (!value) {
      this.unset("contributorRegistry");
    } else {
      this.set("contributorRegistry", Value.fromString(<string>value));
    }
  }

  get contributorRegistryAddress(): Bytes | null {
    let value = this.get("contributorRegistryAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contributorRegistryAddress(value: Bytes | null) {
    if (!value) {
      this.unset("contributorRegistryAddress");
    } else {
      this.set("contributorRegistryAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get nativeToken(): Bytes | null {
    let value = this.get("nativeToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nativeToken(value: Bytes | null) {
    if (!value) {
      this.unset("nativeToken");
    } else {
      this.set("nativeToken", Value.fromBytes(<Bytes>value));
    }
  }

  get nativeTokenInfo(): string | null {
    let value = this.get("nativeTokenInfo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nativeTokenInfo(value: string | null) {
    if (!value) {
      this.unset("nativeTokenInfo");
    } else {
      this.set("nativeTokenInfo", Value.fromString(<string>value));
    }
  }

  get startTime(): BigInt | null {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt | null) {
    if (!value) {
      this.unset("startTime");
    } else {
      this.set("startTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get signUpDeadline(): BigInt | null {
    let value = this.get("signUpDeadline");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set signUpDeadline(value: BigInt | null) {
    if (!value) {
      this.unset("signUpDeadline");
    } else {
      this.set("signUpDeadline", Value.fromBigInt(<BigInt>value));
    }
  }

  get votingDeadline(): BigInt | null {
    let value = this.get("votingDeadline");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set votingDeadline(value: BigInt | null) {
    if (!value) {
      this.unset("votingDeadline");
    } else {
      this.set("votingDeadline", Value.fromBigInt(<BigInt>value));
    }
  }

  get stateTreeDepth(): i32 {
    let value = this.get("stateTreeDepth");
    return value!.toI32();
  }

  set stateTreeDepth(value: i32) {
    this.set("stateTreeDepth", Value.fromI32(value));
  }

  get messageTreeDepth(): i32 {
    let value = this.get("messageTreeDepth");
    return value!.toI32();
  }

  set messageTreeDepth(value: i32) {
    this.set("messageTreeDepth", Value.fromI32(value));
  }

  get voteOptionTreeDepth(): i32 {
    let value = this.get("voteOptionTreeDepth");
    return value!.toI32();
  }

  set voteOptionTreeDepth(value: i32) {
    this.set("voteOptionTreeDepth", Value.fromI32(value));
  }

  get coordinatorPubKeyX(): BigInt | null {
    let value = this.get("coordinatorPubKeyX");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set coordinatorPubKeyX(value: BigInt | null) {
    if (!value) {
      this.unset("coordinatorPubKeyX");
    } else {
      this.set("coordinatorPubKeyX", Value.fromBigInt(<BigInt>value));
    }
  }

  get coordinatorPubKeyY(): BigInt | null {
    let value = this.get("coordinatorPubKeyY");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set coordinatorPubKeyY(value: BigInt | null) {
    if (!value) {
      this.unset("coordinatorPubKeyY");
    } else {
      this.set("coordinatorPubKeyY", Value.fromBigInt(<BigInt>value));
    }
  }

  get coordinator(): Bytes | null {
    let value = this.get("coordinator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set coordinator(value: Bytes | null) {
    if (!value) {
      this.unset("coordinator");
    } else {
      this.set("coordinator", Value.fromBytes(<Bytes>value));
    }
  }

  get voiceCreditFactor(): BigInt | null {
    let value = this.get("voiceCreditFactor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set voiceCreditFactor(value: BigInt | null) {
    if (!value) {
      this.unset("voiceCreditFactor");
    } else {
      this.set("voiceCreditFactor", Value.fromBigInt(<BigInt>value));
    }
  }

  get contributorCount(): BigInt {
    let value = this.get("contributorCount");
    return value!.toBigInt();
  }

  set contributorCount(value: BigInt) {
    this.set("contributorCount", Value.fromBigInt(value));
  }

  get recipientCount(): BigInt {
    let value = this.get("recipientCount");
    return value!.toBigInt();
  }

  set recipientCount(value: BigInt) {
    this.set("recipientCount", Value.fromBigInt(value));
  }

  get matchingPoolSize(): BigInt | null {
    let value = this.get("matchingPoolSize");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set matchingPoolSize(value: BigInt | null) {
    if (!value) {
      this.unset("matchingPoolSize");
    } else {
      this.set("matchingPoolSize", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalSpent(): BigInt | null {
    let value = this.get("totalSpent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSpent(value: BigInt | null) {
    if (!value) {
      this.unset("totalSpent");
    } else {
      this.set("totalSpent", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalVotes(): BigInt | null {
    let value = this.get("totalVotes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalVotes(value: BigInt | null) {
    if (!value) {
      this.unset("totalVotes");
    } else {
      this.set("totalVotes", Value.fromBigInt(<BigInt>value));
    }
  }

  get isFinalized(): boolean {
    let value = this.get("isFinalized");
    return value!.toBoolean();
  }

  set isFinalized(value: boolean) {
    this.set("isFinalized", Value.fromBoolean(value));
  }

  get isCancelled(): boolean {
    let value = this.get("isCancelled");
    return value!.toBoolean();
  }

  set isCancelled(value: boolean) {
    this.set("isCancelled", Value.fromBoolean(value));
  }

  get tallyHash(): string | null {
    let value = this.get("tallyHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tallyHash(value: string | null) {
    if (!value) {
      this.unset("tallyHash");
    } else {
      this.set("tallyHash", Value.fromString(<string>value));
    }
  }

  get recipients(): Array<string> | null {
    let value = this.get("recipients");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get contributors(): Array<string> | null {
    let value = this.get("contributors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get contributions(): Array<string> | null {
    let value = this.get("contributions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }

  get lastUpdatedAt(): string | null {
    let value = this.get("lastUpdatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastUpdatedAt(value: string | null) {
    if (!value) {
      this.unset("lastUpdatedAt");
    } else {
      this.set("lastUpdatedAt", Value.fromString(<string>value));
    }
  }
}

export class RecipientRegistry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RecipientRegistry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RecipientRegistry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RecipientRegistry", id.toString(), this);
    }
  }

  static load(id: string): RecipientRegistry | null {
    return changetype<RecipientRegistry | null>(
      store.get("RecipientRegistry", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clrFund(): string | null {
    let value = this.get("clrFund");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set clrFund(value: string | null) {
    if (!value) {
      this.unset("clrFund");
    } else {
      this.set("clrFund", Value.fromString(<string>value));
    }
  }

  get baseDeposit(): BigInt | null {
    let value = this.get("baseDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set baseDeposit(value: BigInt | null) {
    if (!value) {
      this.unset("baseDeposit");
    } else {
      this.set("baseDeposit", Value.fromBigInt(<BigInt>value));
    }
  }

  get challengePeriodDuration(): BigInt | null {
    let value = this.get("challengePeriodDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set challengePeriodDuration(value: BigInt | null) {
    if (!value) {
      this.unset("challengePeriodDuration");
    } else {
      this.set("challengePeriodDuration", Value.fromBigInt(<BigInt>value));
    }
  }

  get controller(): Bytes | null {
    let value = this.get("controller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set controller(value: Bytes | null) {
    if (!value) {
      this.unset("controller");
    } else {
      this.set("controller", Value.fromBytes(<Bytes>value));
    }
  }

  get maxRecipients(): BigInt | null {
    let value = this.get("maxRecipients");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxRecipients(value: BigInt | null) {
    if (!value) {
      this.unset("maxRecipients");
    } else {
      this.set("maxRecipients", Value.fromBigInt(<BigInt>value));
    }
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get recipients(): Array<string> | null {
    let value = this.get("recipients");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }

  get lastUpdatedAt(): string | null {
    let value = this.get("lastUpdatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastUpdatedAt(value: string | null) {
    if (!value) {
      this.unset("lastUpdatedAt");
    } else {
      this.set("lastUpdatedAt", Value.fromString(<string>value));
    }
  }
}

export class Recipient extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Recipient entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Recipient must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Recipient", id.toString(), this);
    }
  }

  static load(id: string): Recipient | null {
    return changetype<Recipient | null>(store.get("Recipient", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get recipientRegistry(): string | null {
    let value = this.get("recipientRegistry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set recipientRegistry(value: string | null) {
    if (!value) {
      this.unset("recipientRegistry");
    } else {
      this.set("recipientRegistry", Value.fromString(<string>value));
    }
  }

  get recipientIndex(): BigInt | null {
    let value = this.get("recipientIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set recipientIndex(value: BigInt | null) {
    if (!value) {
      this.unset("recipientIndex");
    } else {
      this.set("recipientIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get requestType(): string | null {
    let value = this.get("requestType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set requestType(value: string | null) {
    if (!value) {
      this.unset("requestType");
    } else {
      this.set("requestType", Value.fromString(<string>value));
    }
  }

  get requester(): string | null {
    let value = this.get("requester");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set requester(value: string | null) {
    if (!value) {
      this.unset("requester");
    } else {
      this.set("requester", Value.fromString(<string>value));
    }
  }

  get submissionTime(): string | null {
    let value = this.get("submissionTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set submissionTime(value: string | null) {
    if (!value) {
      this.unset("submissionTime");
    } else {
      this.set("submissionTime", Value.fromString(<string>value));
    }
  }

  get deposit(): BigInt | null {
    let value = this.get("deposit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set deposit(value: BigInt | null) {
    if (!value) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromBigInt(<BigInt>value));
    }
  }

  get recipientAddress(): Bytes | null {
    let value = this.get("recipientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set recipientAddress(value: Bytes | null) {
    if (!value) {
      this.unset("recipientAddress");
    } else {
      this.set("recipientAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get recipientMetadata(): string | null {
    let value = this.get("recipientMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set recipientMetadata(value: string | null) {
    if (!value) {
      this.unset("recipientMetadata");
    } else {
      this.set("recipientMetadata", Value.fromString(<string>value));
    }
  }

  get rejected(): boolean {
    let value = this.get("rejected");
    return value!.toBoolean();
  }

  set rejected(value: boolean) {
    this.set("rejected", Value.fromBoolean(value));
  }

  get verified(): boolean {
    let value = this.get("verified");
    return value!.toBoolean();
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }

  get voteOptionIndex(): BigInt | null {
    let value = this.get("voteOptionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set voteOptionIndex(value: BigInt | null) {
    if (!value) {
      this.unset("voteOptionIndex");
    } else {
      this.set("voteOptionIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get requestResolvedHash(): Bytes | null {
    let value = this.get("requestResolvedHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set requestResolvedHash(value: Bytes | null) {
    if (!value) {
      this.unset("requestResolvedHash");
    } else {
      this.set("requestResolvedHash", Value.fromBytes(<Bytes>value));
    }
  }

  get requestSubmittedHash(): Bytes | null {
    let value = this.get("requestSubmittedHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set requestSubmittedHash(value: Bytes | null) {
    if (!value) {
      this.unset("requestSubmittedHash");
    } else {
      this.set("requestSubmittedHash", Value.fromBytes(<Bytes>value));
    }
  }

  get fundingRounds(): Array<string> | null {
    let value = this.get("fundingRounds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set fundingRounds(value: Array<string> | null) {
    if (!value) {
      this.unset("fundingRounds");
    } else {
      this.set("fundingRounds", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }

  get lastUpdatedAt(): string | null {
    let value = this.get("lastUpdatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastUpdatedAt(value: string | null) {
    if (!value) {
      this.unset("lastUpdatedAt");
    } else {
      this.set("lastUpdatedAt", Value.fromString(<string>value));
    }
  }
}

export class ContributorRegistry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContributorRegistry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContributorRegistry must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContributorRegistry", id.toString(), this);
    }
  }

  static load(id: string): ContributorRegistry | null {
    return changetype<ContributorRegistry | null>(
      store.get("ContributorRegistry", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get clrFund(): string {
    let value = this.get("clrFund");
    return value!.toString();
  }

  set clrFund(value: string) {
    this.set("clrFund", Value.fromString(value));
  }

  get context(): string | null {
    let value = this.get("context");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set context(value: string | null) {
    if (!value) {
      this.unset("context");
    } else {
      this.set("context", Value.fromString(<string>value));
    }
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get contributors(): Array<string> | null {
    let value = this.get("contributors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }

  get lastUpdatedAt(): string | null {
    let value = this.get("lastUpdatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastUpdatedAt(value: string | null) {
    if (!value) {
      this.unset("lastUpdatedAt");
    } else {
      this.set("lastUpdatedAt", Value.fromString(<string>value));
    }
  }
}

export class Contributor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Contributor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Contributor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Contributor", id.toString(), this);
    }
  }

  static load(id: string): Contributor | null {
    return changetype<Contributor | null>(store.get("Contributor", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contributorRegistry(): string {
    let value = this.get("contributorRegistry");
    return value!.toString();
  }

  set contributorRegistry(value: string) {
    this.set("contributorRegistry", Value.fromString(value));
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get verifiedTimeStamp(): string | null {
    let value = this.get("verifiedTimeStamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set verifiedTimeStamp(value: string | null) {
    if (!value) {
      this.unset("verifiedTimeStamp");
    } else {
      this.set("verifiedTimeStamp", Value.fromString(<string>value));
    }
  }

  get contributorAddress(): Bytes | null {
    let value = this.get("contributorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contributorAddress(value: Bytes | null) {
    if (!value) {
      this.unset("contributorAddress");
    } else {
      this.set("contributorAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get fundingRounds(): Array<string> | null {
    let value = this.get("fundingRounds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set fundingRounds(value: Array<string> | null) {
    if (!value) {
      this.unset("fundingRounds");
    } else {
      this.set("fundingRounds", Value.fromStringArray(<Array<string>>value));
    }
  }

  get contributions(): Array<string> | null {
    let value = this.get("contributions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }

  get lastUpdatedAt(): string | null {
    let value = this.get("lastUpdatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastUpdatedAt(value: string | null) {
    if (!value) {
      this.unset("lastUpdatedAt");
    } else {
      this.set("lastUpdatedAt", Value.fromString(<string>value));
    }
  }
}

export class Coordinator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Coordinator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Coordinator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Coordinator", id.toString(), this);
    }
  }

  static load(id: string): Coordinator | null {
    return changetype<Coordinator | null>(store.get("Coordinator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contact(): string | null {
    let value = this.get("contact");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contact(value: string | null) {
    if (!value) {
      this.unset("contact");
    } else {
      this.set("contact", Value.fromString(<string>value));
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }

  get lastUpdatedAt(): string | null {
    let value = this.get("lastUpdatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastUpdatedAt(value: string | null) {
    if (!value) {
      this.unset("lastUpdatedAt");
    } else {
      this.set("lastUpdatedAt", Value.fromString(<string>value));
    }
  }
}

export class Contribution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Contribution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Contribution must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Contribution", id.toString(), this);
    }
  }

  static load(id: string): Contribution | null {
    return changetype<Contribution | null>(store.get("Contribution", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contributor(): string | null {
    let value = this.get("contributor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contributor(value: string | null) {
    if (!value) {
      this.unset("contributor");
    } else {
      this.set("contributor", Value.fromString(<string>value));
    }
  }

  get fundingRound(): string | null {
    let value = this.get("fundingRound");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fundingRound(value: string | null) {
    if (!value) {
      this.unset("fundingRound");
    } else {
      this.set("fundingRound", Value.fromString(<string>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get voiceCredits(): BigInt | null {
    let value = this.get("voiceCredits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set voiceCredits(value: BigInt | null) {
    if (!value) {
      this.unset("voiceCredits");
    } else {
      this.set("voiceCredits", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contributor(): string | null {
    let value = this.get("contributor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contributor(value: string | null) {
    if (!value) {
      this.unset("contributor");
    } else {
      this.set("contributor", Value.fromString(<string>value));
    }
  }

  get fundingRound(): string | null {
    let value = this.get("fundingRound");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fundingRound(value: string | null) {
    if (!value) {
      this.unset("fundingRound");
    } else {
      this.set("fundingRound", Value.fromString(<string>value));
    }
  }

  get voterAddress(): Bytes | null {
    let value = this.get("voterAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set voterAddress(value: Bytes | null) {
    if (!value) {
      this.unset("voterAddress");
    } else {
      this.set("voterAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get secret(): boolean {
    let value = this.get("secret");
    return value!.toBoolean();
  }

  set secret(value: boolean) {
    this.set("secret", Value.fromBoolean(value));
  }
}

export class Donation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Donation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Donation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Donation", id.toString(), this);
    }
  }

  static load(id: string): Donation | null {
    return changetype<Donation | null>(store.get("Donation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get recipient(): Bytes | null {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes | null) {
    if (!value) {
      this.unset("recipient");
    } else {
      this.set("recipient", Value.fromBytes(<Bytes>value));
    }
  }

  get fundingRound(): string | null {
    let value = this.get("fundingRound");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fundingRound(value: string | null) {
    if (!value) {
      this.unset("fundingRound");
    } else {
      this.set("fundingRound", Value.fromString(<string>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get voteOptionIndex(): BigInt | null {
    let value = this.get("voteOptionIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set voteOptionIndex(value: BigInt | null) {
    if (!value) {
      this.unset("voteOptionIndex");
    } else {
      this.set("voteOptionIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get decimals(): BigInt | null {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt | null) {
    if (!value) {
      this.unset("decimals");
    } else {
      this.set("decimals", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }

  get lastUpdatedAt(): string | null {
    let value = this.get("lastUpdatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastUpdatedAt(value: string | null) {
    if (!value) {
      this.unset("lastUpdatedAt");
    } else {
      this.set("lastUpdatedAt", Value.fromString(<string>value));
    }
  }
}
